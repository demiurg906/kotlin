== foo ==
fun foo(b: Boolean) {
    // contract { consumes Exception("aaa") }
    if (b) {
        bar()
    } else {
        val x = 10
    }
}
---------------------
L0:
  1 <START>
    v(b: Boolean)
    magic[FAKE_INITIALIZER](b: Boolean) -> <v0>
    w(b|<v0>)
  2 mark({ // contract { consumes Exception("aaa") } if (b) { bar() } else { val x = 10 } })
    mark(if (b) { bar() } else { val x = 10 })
    r(b) -> <v1>
    jf(L2|<v1>)                                                                                 NEXT:[mark({ val x = 10 }), mark({ bar() })]
  3 mark({ bar() })
    mark(bar())
    call(bar(), bar) -> <v2>
  2 jmp(L3)                                                                                     NEXT:[merge(if (b) { bar() } else { val x = 10 }|<v2>, !<v4>) -> <v5>]
L2 [else branch]:
  3 mark({ val x = 10 })                                                                        PREV:[jf(L2|<v1>)]
    v(val x = 10)
    r(10) -> <v3>
    w(x|<v3>)
L3 ['if' expression result]:
  2 merge(if (b) { bar() } else { val x = 10 }|<v2>, !<v4>) -> <v5>                             PREV:[jmp(L3), w(x|<v3>)]
L1:
  1 <END>                                                                                       NEXT:[<SINK>]
error:
    <ERROR>                                                                                     PREV:[]
sink:
    <SINK>                                                                                      PREV:[<ERROR>, <END>]
=====================
== bad ==
fun bad(b: Boolean) {
    if (b) {
        bar()
    } else {
        val x = 10
    }
}
---------------------
L0:
  1 <START>
    v(b: Boolean)
    magic[FAKE_INITIALIZER](b: Boolean) -> <v0>
    w(b|<v0>)
  2 mark({ if (b) { bar() } else { val x = 10 } })
    mark(if (b) { bar() } else { val x = 10 })
    r(b) -> <v1>
    jf(L2|<v1>)                                                        NEXT:[mark({ val x = 10 }), mark({ bar() })]
  3 mark({ bar() })
    mark(bar())
    call(bar(), bar) -> <v2>
  2 jmp(L3)                                                            NEXT:[merge(if (b) { bar() } else { val x = 10 }|<v2>, !<v4>) -> <v5>]
L2 [else branch]:
  3 mark({ val x = 10 })                                               PREV:[jf(L2|<v1>)]
    v(val x = 10)
    r(10) -> <v3>
    w(x|<v3>)
L3 ['if' expression result]:
  2 merge(if (b) { bar() } else { val x = 10 }|<v2>, !<v4>) -> <v5>    PREV:[jmp(L3), w(x|<v3>)]
L1:
  1 <END>                                                              NEXT:[<SINK>]
error:
    <ERROR>                                                            PREV:[]
sink:
    <SINK>                                                             PREV:[<ERROR>, <END>]
=====================
== bar ==
fun bar() {
    // contract { supplies Exception("aaa") }
}
---------------------
L0:
  1 <START>
  2 mark({ // contract { supplies Exception("aaa") } })
    read (Unit)
L1:
  1 <END>                                                  NEXT:[<SINK>]
error:
    <ERROR>                                                PREV:[]
sink:
    <SINK>                                                 PREV:[<ERROR>, <END>]
=====================
