== foo ==
fun foo() {
    // contract { consumes Exception("aaa") }
    bar()
}
---------------------
L0:
  1 <START>
  2 mark({ // contract { consumes Exception("aaa") } bar() })
    mark(bar())
    call(bar(), bar) -> <v0>
L1:
  1 <END>                                                        NEXT:[<SINK>]
error:
    <ERROR>                                                      PREV:[]
sink:
    <SINK>                                                       PREV:[<ERROR>, <END>]
=====================
== bar ==
fun bar() {
    // contract { supplies Exception("aaa") }
}
---------------------
L0:
  1 <START>
  2 mark({ // contract { supplies Exception("aaa") } })
    read (Unit)
L1:
  1 <END>                                                  NEXT:[<SINK>]
error:
    <ERROR>                                                PREV:[]
sink:
    <SINK>                                                 PREV:[<ERROR>, <END>]
=====================
== bad ==
fun bad() {
    bar()
}
---------------------
L0:
  1 <START>
  2 mark({ bar() })
    mark(bar())
    call(bar(), bar) -> <v0>
L1:
  1 <END>                       NEXT:[<SINK>]
error:
    <ERROR>                     PREV:[]
sink:
    <SINK>                      PREV:[<ERROR>, <END>]
=====================
