package

public inline fun myCatchIOException(/*0*/ block: () -> kotlin.Unit): kotlin.Unit
    CallsInPlace(block, EXACTLY_ONCE)
    blockkotlin.Unit consumes Consumer of IOExceptionkotlin.Unit

public inline fun myCatchRuntimeException(/*0*/ block: () -> kotlin.Unit): kotlin.Unit
    CallsInPlace(block, EXACTLY_ONCE)
    blockkotlin.Unit consumes Consumer of RuntimeExceptionkotlin.Unit

public fun test_1(): kotlin.Unit
public fun test_2(): kotlin.Unit
public fun test_3(): kotlin.Unit
public fun test_4(): kotlin.Unit

public final class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun throwsIOException(): kotlin.Unit
        Supplier of IOException

    public final fun throwsNullPointerException(): kotlin.Unit
        Supplier of NullPointerException

    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
